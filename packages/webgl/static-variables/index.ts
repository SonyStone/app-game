import { GL_BUFFER_TARGET } from './buffer';
import { GL_DATA_TYPE } from './data-type';
import { GL_PROGRAM_PARAMETER } from './program-parameter';
import { GL_CONST } from './static-variables';
import { GL_TEXTURES } from './textures';

export {
  GL_CONST as GL_STATIC_VARIABLES,
  GL_TEXTURES,
  GL_DATA_TYPE,
  GL_PROGRAM_PARAMETER,
  GL_BUFFER_TARGET as GL_BUFFER_TYPE
};

/**
 * ClearBufferMask
 * A GLbitfield bitwise OR mask that indicates the buffers to be cleared. Possible values are:
 */
export const enum GL_CLEAR_MASK {
  /** mask that indicates the buffers to be cleared */
  COLOR_BUFFER_BIT = GL_CONST.COLOR_BUFFER_BIT,
  /** mask that indicates the buffers to be cleared */
  DEPTH_BUFFER_BIT = GL_CONST.DEPTH_BUFFER_BIT,
  /** mask that indicates the buffers to be cleared */
  STENCIL_BUFFER_BIT = GL_CONST.STENCIL_BUFFER_BIT
}

/**
 * BeginMode
 */
export const enum GL_DRAW_ARRAYS_MODE {
  /** Draws a single dot. */
  POINTS = GL_CONST.POINTS,

  /** Draws a straight line to the next vertex. */
  LINE_STRIP = GL_CONST.LINE_STRIP,

  /** Draws a straight line to the next vertex, and connects the last vertex back to the first. */
  LINE_LOOP = GL_CONST.LINE_LOOP,

  /** Draws a line between a pair of vertices. */
  LINES = GL_CONST.LINES,
  TRIANGLE_STRIP = GL_CONST.TRIANGLE_STRIP,
  TRIANGLE_FAN = GL_CONST.TRIANGLE_FAN,

  /** Draws a triangle for a group of three vertices. */
  TRIANGLES = GL_CONST.TRIANGLES
}

export const enum GL_SHADER_TYPE {
  /**
   * vertex shader
   */
  VERTEX_SHADER = GL_CONST.VERTEX_SHADER,

  /**
   * fragment shader
   */
  FRAGMENT_SHADER = GL_CONST.FRAGMENT_SHADER
}

export const enum GL_BUFFER_USAGE {
  STATIC_DRAW = GL_CONST.STATIC_DRAW,
  DYNAMIC_DRAW = GL_CONST.DYNAMIC_DRAW,
  STREAM_DRAW = GL_CONST.STREAM_DRAW,
  STATIC_READ = GL_CONST.STATIC_READ,
  DYNAMIC_READ = GL_CONST.DYNAMIC_READ,
  STREAM_READ = GL_CONST.STREAM_READ,
  STATIC_COPY = GL_CONST.STATIC_COPY,
  DYNAMIC_COPY = GL_CONST.DYNAMIC_COPY,
  STREAM_COPY = GL_CONST.STREAM_COPY
}

export const enum GL_DRAW_ELEMENTS_TYPE {
  UNSIGNED_SHORT = GL_CONST.UNSIGNED_SHORT,
  UNSIGNED_INT = GL_CONST.UNSIGNED_INT
}

export const enum COLOR_ATTACHMENT {
  COLOR_ATTACHMENT0 = GL_CONST.COLOR_ATTACHMENT0,
  COLOR_ATTACHMENT1 = GL_CONST.COLOR_ATTACHMENT1,
  COLOR_ATTACHMENT2 = GL_CONST.COLOR_ATTACHMENT2,
  COLOR_ATTACHMENT3 = GL_CONST.COLOR_ATTACHMENT3,
  COLOR_ATTACHMENT4 = GL_CONST.COLOR_ATTACHMENT4,
  COLOR_ATTACHMENT5 = GL_CONST.COLOR_ATTACHMENT5,
  COLOR_ATTACHMENT6 = GL_CONST.COLOR_ATTACHMENT6,
  COLOR_ATTACHMENT7 = GL_CONST.COLOR_ATTACHMENT7,
  COLOR_ATTACHMENT8 = GL_CONST.COLOR_ATTACHMENT8,
  COLOR_ATTACHMENT9 = GL_CONST.COLOR_ATTACHMENT9,
  COLOR_ATTACHMENT10 = GL_CONST.COLOR_ATTACHMENT10,
  COLOR_ATTACHMENT11 = GL_CONST.COLOR_ATTACHMENT11,
  COLOR_ATTACHMENT12 = GL_CONST.COLOR_ATTACHMENT12,
  COLOR_ATTACHMENT13 = GL_CONST.COLOR_ATTACHMENT13,
  COLOR_ATTACHMENT14 = GL_CONST.COLOR_ATTACHMENT14,
  COLOR_ATTACHMENT15 = GL_CONST.COLOR_ATTACHMENT15
}

/**
 * BlendingFactorSrc
 * @default: ONE
 * BlendingFactorDest
 * @default: ZERO
 */
export const enum BLENDING_FACTOR {
  /**
   * `0,0,0,0`
   *
   * Multiplies all colors by 0.
   */
  ZERO = GL_CONST.ZERO,

  /**
   * `1,1,1,1`
   *
   * Multiplies all colors by 1.
   */
  ONE = GL_CONST.ONE,

  /**
   * `RS, GS, BS, AS`
   *
   * Multiplies all colors by the source colors.
   */
  SRC_COLOR = GL_CONST.SRC_COLOR,

  /**
   * `1-RS, 1-GS, 1-BS, 1-AS`
   *
   * Multiplies all colors by 1 minus each source color.
   */
  ONE_MINUS_SRC_COLOR = GL_CONST.ONE_MINUS_SRC_COLOR,

  /**
   * `RD, GD, BD, AD`
   *
   * Multiplies all colors by the destination color.
   */
  DST_COLOR = GL_CONST.DST_COLOR,

  /**
   * 	`1-RD, 1-GD, 1-BD, 1-AD`
   *
   * Multiplies all colors by 1 minus each destination color.
   */
  ONE_MINUS_DST_COLOR = GL_CONST.ONE_MINUS_DST_COLOR,

  /**
   * 	`AS, AS, AS, AS`
   *
   * Multiplies all colors by the source alpha value.
   */
  SRC_ALPHA = GL_CONST.SRC_ALPHA,

  /**
   * `1-AS, 1-AS, 1-AS, 1-AS`
   *
   * Multiplies all colors by 1 minus the source alpha value.
   */
  ONE_MINUS_SRC_ALPHA = GL_CONST.ONE_MINUS_SRC_ALPHA,

  /**
   * `AD, AD, AD, AD`
   *
   * Multiplies all colors by the destination alpha value.
   */
  DST_ALPHA = GL_CONST.DST_ALPHA,

  /**
   * `1-AD, 1-AD, 1-AD, 1-AD`
   *
   * Multiplies all colors by 1 minus the destination alpha value.
   */
  ONE_MINUS_DST_ALPHA = GL_CONST.ONE_MINUS_DST_ALPHA,

  /**
   * 	`RC, GC, BC, AC`
   *
   * Multiplies all colors by a constant color.
   */
  CONSTANT_COLOR = GL_CONST.CONSTANT_COLOR,

  /**
   * `1-RC, 1-GC, 1-BC, 1-AC`
   *
   * Multiplies all colors by 1 minus a constant color.
   */
  ONE_MINUS_CONSTANT_COLOR = GL_CONST.ONE_MINUS_CONSTANT_COLOR,

  /**
   * 	`AC, AC, AC, AC`
   *
   * Multiplies all colors by a constant alpha value.
   */
  CONSTANT_ALPHA = GL_CONST.CONSTANT_ALPHA,

  /**
   * 	`1-AC, 1-AC, 1-AC, 1-AC`
   *
   * Multiplies all colors by 1 minus a constant alpha value.
   */
  ONE_MINUS_CONSTANT_ALPHA = GL_CONST.ONE_MINUS_CONSTANT_ALPHA,

  /**
   * `min(AS, 1 - AD), min(AS, 1 - AD), min(AS, 1 - AD), 1`
   *
   * Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1
   * minus the destination alpha value. The alpha value is multiplied by 1.
   */
  SRC_ALPHA_SATURATE = GL_CONST.SRC_ALPHA_SATURATE
}

export const enum BLEND_EQUATION_SEPARATE {
  FUNC_ADD = GL_CONST.FUNC_ADD,
  BLEND_EQUATION = GL_CONST.BLEND_EQUATION,
  BLEND_EQUATION_RGB = GL_CONST.BLEND_EQUATION_RGB,
  BLEND_EQUATION_ALPHA = GL_CONST.BLEND_EQUATION_ALPHA
}

/* Framebuffer Object. */
export const enum GL_FRAMEBUFFER_OBJECT {
  FRAMEBUFFER = GL_CONST.FRAMEBUFFER,
  RENDERBUFFER = GL_CONST.RENDERBUFFER
}

/**
 * ```ts
 * framebufferTexture2D() // target
 * ```
 */
export const enum GL_FRAMEBUFFER_TARGET {
  /**
   * Collection buffer data storage of color, alpha, depth and stencil buffers used to render an image.
   */
  FRAMEBUFFER = GL_CONST.FRAMEBUFFER,
  /**
   * Used as a destination for drawing, rendering, clearing, and writing operations.
   * @remarks WebGL2 additional constants
   */
  DRAW_FRAMEBUFFER = GL_CONST.DRAW_FRAMEBUFFER,
  /**
   * Used as a source for reading operations.
   * @remarks WebGL2 additional constants
   */
  READ_FRAMEBUFFER = GL_CONST.READ_FRAMEBUFFER
}

/**
 * bindRenderbuffer()
 * renderbufferStorage()
 */
export const enum GL_RENDERBUFFER_TARGET {
  RENDERBUFFER = GL_CONST.RENDERBUFFER
}

/** WebGLRenderingContext: enable() */
export const enum GL_CAPABILITIES {
  BLEND = GL_CONST.BLEND,
  CULL_FACE = GL_CONST.CULL_FACE,
  DEPTH_TEST = GL_CONST.DEPTH_TEST,
  DITHER = GL_CONST.DITHER,
  POLYGON_OFFSET_FILL = GL_CONST.POLYGON_OFFSET_FILL,
  SAMPLE_ALPHA_TO_COVERAGE = GL_CONST.SAMPLE_ALPHA_TO_COVERAGE,
  SAMPLE_COVERAGE = GL_CONST.SAMPLE_COVERAGE,
  SCISSOR_TEST = GL_CONST.SCISSOR_TEST,
  STENCIL_TEST = GL_CONST.STENCIL_TEST
}

/** WebGLRenderingContext: frontFace() */
export const enum GL_FRONT_FACE {
  CW = GL_CONST.CW,
  CCW = GL_CONST.CCW
}

/** WebGLRenderingContext: cullFace() */
export const enum GL_CULL_FACE {
  FRONT = GL_CONST.FRONT,
  BACK = GL_CONST.BACK,
  FRONT_AND_BACK = GL_CONST.FRONT_AND_BACK
}

/** WebGLRenderingContext: blendEquationSeparate() */
export const enum GL_BLEND_EQUATION {
  FUNC_ADD = GL_CONST.FUNC_ADD,
  FUNC_SUBTRACT = GL_CONST.FUNC_SUBTRACT,
  FUNC_REVERSE_SUBTRACT = GL_CONST.FUNC_REVERSE_SUBTRACT,
  // MIN_EXT = GL_CONST.MIN_EXT,
  // MAX_EXT = GL_CONST.MAX_EXT
  MIN = GL_CONST.MIN,
  MAX = GL_CONST.MAX
}

/**
 * WebGLRenderingContext: blendFuncSeparate()
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate)
 */
export const enum GL_FUNC_SEPARATE {
  ZERO = GL_CONST.ZERO,
  ONE = GL_CONST.ONE,
  SRC_COLOR = GL_CONST.SRC_COLOR,
  ONE_MINUS_SRC_COLOR = GL_CONST.ONE_MINUS_SRC_COLOR,
  DST_COLOR = GL_CONST.DST_COLOR,
  ONE_MINUS_DST_COLOR = GL_CONST.ONE_MINUS_DST_COLOR,
  SRC_ALPHA = GL_CONST.SRC_ALPHA,
  ONE_MINUS_SRC_ALPHA = GL_CONST.ONE_MINUS_SRC_ALPHA,
  DST_ALPHA = GL_CONST.DST_ALPHA,
  ONE_MINUS_DST_ALPHA = GL_CONST.ONE_MINUS_DST_ALPHA,
  CONSTANT_COLOR = GL_CONST.CONSTANT_COLOR,
  ONE_MINUS_CONSTANT_COLOR = GL_CONST.ONE_MINUS_CONSTANT_COLOR,
  CONSTANT_ALPHA = GL_CONST.CONSTANT_ALPHA,
  ONE_MINUS_CONSTANT_ALPHA = GL_CONST.ONE_MINUS_CONSTANT_ALPHA,
  SRC_ALPHA_SATURATE = GL_CONST.SRC_ALPHA_SATURATE
}

/**
 * WebGLRenderingContext: getParameter() method
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter#parameter_names)
 */
export const enum GL_PARAMETER {
  ACTIVE_TEXTURE = GL_CONST.ACTIVE_TEXTURE,
  ALIASED_LINE_WIDTH_RANGE = GL_CONST.ALIASED_LINE_WIDTH_RANGE,
  ALIASED_POINT_SIZE_RANGE = GL_CONST.ALIASED_POINT_SIZE_RANGE,
  ALPHA_BITS = GL_CONST.ALPHA_BITS,
  ARRAY_BUFFER_BINDING = GL_CONST.ARRAY_BUFFER_BINDING,
  BLEND = GL_CONST.BLEND,
  BLEND_COLOR = GL_CONST.BLEND_COLOR,
  BLEND_DST_ALPHA = GL_CONST.BLEND_DST_ALPHA,
  BLEND_DST_RGB = GL_CONST.BLEND_DST_RGB,
  BLEND_EQUATION = GL_CONST.BLEND_EQUATION,
  BLEND_EQUATION_RGB = GL_CONST.BLEND_EQUATION_RGB,
  BLEND_EQUATION_ALPHA = GL_CONST.BLEND_EQUATION_ALPHA,
  BLEND_SRC_ALPHA = GL_CONST.BLEND_SRC_ALPHA,
  BLEND_SRC_RGB = GL_CONST.BLEND_SRC_RGB,
  BLUE_BITS = GL_CONST.BLUE_BITS,
  COLOR_CLEAR_VALUE = GL_CONST.COLOR_CLEAR_VALUE,
  COLOR_WRITEMASK = GL_CONST.COLOR_WRITEMASK,
  COMPRESSED_TEXTURE_FORMATS = GL_CONST.COMPRESSED_TEXTURE_FORMATS,
  CULL_FACE = GL_CONST.CULL_FACE,
  CULL_FACE_MODE = GL_CONST.CULL_FACE_MODE,
  CURRENT_PROGRAM = GL_CONST.CURRENT_PROGRAM,
  DEPTH_BITS = GL_CONST.DEPTH_BITS,
  DEPTH_CLEAR_VALUE = GL_CONST.DEPTH_CLEAR_VALUE,
  DEPTH_FUNC = GL_CONST.DEPTH_FUNC,
  DEPTH_RANGE = GL_CONST.DEPTH_RANGE,
  DEPTH_TEST = GL_CONST.DEPTH_TEST,
  DEPTH_WRITEMASK = GL_CONST.DEPTH_WRITEMASK,
  DITHER = GL_CONST.DITHER,
  ELEMENT_ARRAY_BUFFER_BINDING = GL_CONST.ELEMENT_ARRAY_BUFFER_BINDING,
  FRAMEBUFFER_BINDING = GL_CONST.FRAMEBUFFER_BINDING,
  FRONT_FACE = GL_CONST.FRONT_FACE,
  GENERATE_MIPMAP_HINT = GL_CONST.GENERATE_MIPMAP_HINT,
  GREEN_BITS = GL_CONST.GREEN_BITS,
  IMPLEMENTATION_COLOR_READ_FORMAT = GL_CONST.IMPLEMENTATION_COLOR_READ_FORMAT,
  IMPLEMENTATION_COLOR_READ_TYPE = GL_CONST.IMPLEMENTATION_COLOR_READ_TYPE,
  LINE_WIDTH = GL_CONST.LINE_WIDTH,
  MAX_COMBINED_TEXTURE_IMAGE_UNITS = GL_CONST.MAX_COMBINED_TEXTURE_IMAGE_UNITS,
  MAX_CUBE_MAP_TEXTURE_SIZE = GL_CONST.MAX_CUBE_MAP_TEXTURE_SIZE,
  MAX_FRAGMENT_UNIFORM_VECTORS = GL_CONST.MAX_FRAGMENT_UNIFORM_VECTORS,
  MAX_RENDERBUFFER_SIZE = GL_CONST.MAX_RENDERBUFFER_SIZE,
  MAX_TEXTURE_IMAGE_UNITS = GL_CONST.MAX_TEXTURE_IMAGE_UNITS,
  MAX_TEXTURE_SIZE = GL_CONST.MAX_TEXTURE_SIZE,
  MAX_VARYING_VECTORS = GL_CONST.MAX_VARYING_VECTORS,
  MAX_VERTEX_ATTRIBS = GL_CONST.MAX_VERTEX_ATTRIBS,
  MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL_CONST.MAX_VERTEX_TEXTURE_IMAGE_UNITS,
  MAX_VERTEX_UNIFORM_VECTORS = GL_CONST.MAX_VERTEX_UNIFORM_VECTORS,
  MAX_VIEWPORT_DIMS = GL_CONST.MAX_VIEWPORT_DIMS,
  PACK_ALIGNMENT = GL_CONST.PACK_ALIGNMENT,
  POLYGON_OFFSET_FACTOR = GL_CONST.POLYGON_OFFSET_FACTOR,
  POLYGON_OFFSET_FILL = GL_CONST.POLYGON_OFFSET_FILL,
  POLYGON_OFFSET_UNITS = GL_CONST.POLYGON_OFFSET_UNITS,
  RED_BITS = GL_CONST.RED_BITS,
  RENDERBUFFER_BINDING = GL_CONST.RENDERBUFFER_BINDING,
  RENDERER = GL_CONST.RENDERER,
  SAMPLE_BUFFERS = GL_CONST.SAMPLE_BUFFERS,
  SAMPLE_COVERAGE_INVERT = GL_CONST.SAMPLE_COVERAGE_INVERT,
  SAMPLE_COVERAGE_VALUE = GL_CONST.SAMPLE_COVERAGE_VALUE,
  SAMPLES = GL_CONST.SAMPLES,
  SCISSOR_BOX = GL_CONST.SCISSOR_BOX,
  SCISSOR_TEST = GL_CONST.SCISSOR_TEST,
  SHADING_LANGUAGE_VERSION = GL_CONST.SHADING_LANGUAGE_VERSION,
  STENCIL_BACK_FAIL = GL_CONST.STENCIL_BACK_FAIL,
  STENCIL_BACK_FUNC = GL_CONST.STENCIL_BACK_FUNC,
  STENCIL_BACK_PASS_DEPTH_FAIL = GL_CONST.STENCIL_BACK_PASS_DEPTH_FAIL,
  STENCIL_BACK_PASS_DEPTH_PASS = GL_CONST.STENCIL_BACK_PASS_DEPTH_PASS,
  STENCIL_BACK_REF = GL_CONST.STENCIL_BACK_REF,
  STENCIL_BACK_VALUE_MASK = GL_CONST.STENCIL_BACK_VALUE_MASK,
  STENCIL_BACK_WRITEMASK = GL_CONST.STENCIL_BACK_WRITEMASK,
  STENCIL_BITS = GL_CONST.STENCIL_BITS,
  STENCIL_CLEAR_VALUE = GL_CONST.STENCIL_CLEAR_VALUE,
  STENCIL_FAIL = GL_CONST.STENCIL_FAIL,
  STENCIL_FUNC = GL_CONST.STENCIL_FUNC,
  STENCIL_PASS_DEPTH_FAIL = GL_CONST.STENCIL_PASS_DEPTH_FAIL,
  STENCIL_PASS_DEPTH_PASS = GL_CONST.STENCIL_PASS_DEPTH_PASS,
  STENCIL_REF = GL_CONST.STENCIL_REF,
  STENCIL_TEST = GL_CONST.STENCIL_TEST,
  STENCIL_VALUE_MASK = GL_CONST.STENCIL_VALUE_MASK,
  STENCIL_WRITEMASK = GL_CONST.STENCIL_WRITEMASK,
  SUBPIXEL_BITS = GL_CONST.SUBPIXEL_BITS,
  TEXTURE_BINDING_2D = GL_CONST.TEXTURE_BINDING_2D,
  TEXTURE_BINDING_CUBE_MAP = GL_CONST.TEXTURE_BINDING_CUBE_MAP,
  UNPACK_ALIGNMENT = GL_CONST.UNPACK_ALIGNMENT,
  UNPACK_COLORSPACE_CONVERSION_WEBGL = GL_CONST.UNPACK_COLORSPACE_CONVERSION_WEBGL,
  UNPACK_FLIP_Y_WEBGL = GL_CONST.UNPACK_FLIP_Y_WEBGL,
  UNPACK_PREMULTIPLY_ALPHA_WEBGL = GL_CONST.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
  VENDOR = GL_CONST.VENDOR,
  VERSION = GL_CONST.VERSION,
  VIEWPORT = GL_CONST.VIEWPORT,
  // WebGL2
  COPY_READ_BUFFER_BINDING = GL_CONST.COPY_READ_BUFFER_BINDING,
  COPY_WRITE_BUFFER_BINDING = GL_CONST.COPY_WRITE_BUFFER_BINDING,
  DRAW_BUFFER0 = GL_CONST.DRAW_BUFFER0,
  DRAW_BUFFER1 = GL_CONST.DRAW_BUFFER1,
  DRAW_BUFFER2 = GL_CONST.DRAW_BUFFER2,
  DRAW_BUFFER3 = GL_CONST.DRAW_BUFFER3,
  DRAW_BUFFER4 = GL_CONST.DRAW_BUFFER4,
  DRAW_BUFFER5 = GL_CONST.DRAW_BUFFER5,
  DRAW_BUFFER6 = GL_CONST.DRAW_BUFFER6,
  DRAW_BUFFER7 = GL_CONST.DRAW_BUFFER7,
  DRAW_BUFFER8 = GL_CONST.DRAW_BUFFER8,
  DRAW_BUFFER9 = GL_CONST.DRAW_BUFFER9,
  DRAW_BUFFER10 = GL_CONST.DRAW_BUFFER10,
  DRAW_BUFFER11 = GL_CONST.DRAW_BUFFER11,
  DRAW_BUFFER12 = GL_CONST.DRAW_BUFFER12,
  DRAW_BUFFER13 = GL_CONST.DRAW_BUFFER13,
  DRAW_BUFFER14 = GL_CONST.DRAW_BUFFER14,
  DRAW_BUFFER15 = GL_CONST.DRAW_BUFFER15,
  FRAGMENT_SHADER_DERIVATIVE_HINT = GL_CONST.FRAGMENT_SHADER_DERIVATIVE_HINT,
  MAX_3D_TEXTURE_SIZE = GL_CONST.MAX_3D_TEXTURE_SIZE,
  MAX_ARRAY_TEXTURE_LAYERS = GL_CONST.MAX_ARRAY_TEXTURE_LAYERS,
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL = GL_CONST.MAX_CLIENT_WAIT_TIMEOUT_WEBGL,
  MAX_COLOR_ATTACHMENTS = GL_CONST.MAX_COLOR_ATTACHMENTS,
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GL_CONST.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
  MAX_COMBINED_UNIFORM_BLOCKS = GL_CONST.MAX_COMBINED_UNIFORM_BLOCKS,
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GL_CONST.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
  MAX_DRAW_BUFFERS = GL_CONST.MAX_DRAW_BUFFERS,
  MAX_ELEMENT_INDEX = GL_CONST.MAX_ELEMENT_INDEX,
  MAX_ELEMENTS_INDICES = GL_CONST.MAX_ELEMENTS_INDICES,
  MAX_ELEMENTS_VERTICES = GL_CONST.MAX_ELEMENTS_VERTICES,
  MAX_FRAGMENT_INPUT_COMPONENTS = GL_CONST.MAX_FRAGMENT_INPUT_COMPONENTS,
  MAX_FRAGMENT_UNIFORM_BLOCKS = GL_CONST.MAX_FRAGMENT_UNIFORM_BLOCKS,
  MAX_FRAGMENT_UNIFORM_COMPONENTS = GL_CONST.MAX_FRAGMENT_UNIFORM_COMPONENTS,
  MAX_PROGRAM_TEXEL_OFFSET = GL_CONST.MAX_PROGRAM_TEXEL_OFFSET,
  MAX_SAMPLES = GL_CONST.MAX_SAMPLES,
  MAX_SERVER_WAIT_TIMEOUT = GL_CONST.MAX_SERVER_WAIT_TIMEOUT,
  MAX_TEXTURE_LOD_BIAS = GL_CONST.MAX_TEXTURE_LOD_BIAS,
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = GL_CONST.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = GL_CONST.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = GL_CONST.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS,
  MAX_UNIFORM_BLOCK_SIZE = GL_CONST.MAX_UNIFORM_BLOCK_SIZE,
  MAX_UNIFORM_BUFFER_BINDINGS = GL_CONST.MAX_UNIFORM_BUFFER_BINDINGS,
  MAX_VARYING_COMPONENTS = GL_CONST.MAX_VARYING_COMPONENTS,
  MAX_VERTEX_OUTPUT_COMPONENTS = GL_CONST.MAX_VERTEX_OUTPUT_COMPONENTS,
  MAX_VERTEX_UNIFORM_BLOCKS = GL_CONST.MAX_VERTEX_UNIFORM_BLOCKS,
  MAX_VERTEX_UNIFORM_COMPONENTS = GL_CONST.MAX_VERTEX_UNIFORM_COMPONENTS,
  MIN_PROGRAM_TEXEL_OFFSET = GL_CONST.MIN_PROGRAM_TEXEL_OFFSET,
  PACK_ROW_LENGTH = GL_CONST.PACK_ROW_LENGTH,
  PACK_SKIP_PIXELS = GL_CONST.PACK_SKIP_PIXELS,
  PACK_SKIP_ROWS = GL_CONST.PACK_SKIP_ROWS,
  PIXEL_PACK_BUFFER_BINDING = GL_CONST.PIXEL_PACK_BUFFER_BINDING,
  PIXEL_UNPACK_BUFFER_BINDING = GL_CONST.PIXEL_UNPACK_BUFFER_BINDING,
  RASTERIZER_DISCARD = GL_CONST.RASTERIZER_DISCARD,
  READ_BUFFER = GL_CONST.READ_BUFFER,
  DRAW_FRAMEBUFFER_BINDING = GL_CONST.DRAW_FRAMEBUFFER_BINDING,
  READ_FRAMEBUFFER_BINDING = GL_CONST.READ_FRAMEBUFFER_BINDING,
  RENDERBUFFER_SAMPLES = GL_CONST.RENDERBUFFER_SAMPLES,
  SAMPLER_BINDING = GL_CONST.SAMPLER_BINDING,
  TEXTURE_BINDING_3D = GL_CONST.TEXTURE_BINDING_3D,
  TEXTURE_BINDING_2D_ARRAY = GL_CONST.TEXTURE_BINDING_2D_ARRAY
}

/** [extensions](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API#extensions) */
export type EXTENSIONS =
  | 'ANGLE_instanced_arrays'
  | 'EXT_blend_minmax'
  | 'EXT_color_buffer_float'
  | 'EXT_color_buffer_half_float'
  | 'EXT_disjoint_timer_query'
  | 'EXT_float_blend Experimental'
  | 'EXT_frag_depth'
  | 'EXT_shader_texture_lod'
  | 'EXT_sRGB'
  | 'EXT_texture_compression_bptc'
  | 'EXT_texture_compression_rgtc'
  | 'EXT_texture_filter_anisotropic'
  | 'EXT_texture_norm16'
  | 'KHR_parallel_shader_compile'
  | 'OES_draw_buffers_indexed'
  | 'OES_element_index_uint'
  | 'OES_fbo_render_mipmap'
  | 'OES_standard_derivatives'
  | 'OES_texture_float'
  | 'OES_texture_float_linear'
  | 'OES_texture_half_float'
  | 'OES_texture_half_float_linear'
  | 'OES_vertex_array_object'
  | 'OVR_multiview2'
  | 'WEBGL_color_buffer_float'
  | 'WEBGL_compressed_texture_astc'
  | 'WEBGL_compressed_texture_etc'
  | 'WEBGL_compressed_texture_etc1'
  | 'WEBGL_compressed_texture_pvrtc'
  | 'WEBGL_compressed_texture_s3tc'
  | 'WEBGL_compressed_texture_s3tc_srgb'
  | 'WEBGL_debug_renderer_info'
  | 'WEBGL_debug_shaders'
  | 'WEBGL_depth_texture'
  | 'WEBGL_draw_buffers'
  | 'WEBGL_lose_context'
  | 'WEBGL_multi_draw'
  | 'WEBKIT_WEBGL_compressed_texture_pvrtc';
