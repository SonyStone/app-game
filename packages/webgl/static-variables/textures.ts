import { GL_CONST } from './static-variables';

/**
 * PixelFormat
 * ```ts
 * gl.copyTexImage2D() // internalformat
 * ```
 */
export const enum GL_PIXEL_FORMAT {
  DEPTH_COMPONENT = GL_CONST.DEPTH_COMPONENT,
  ALPHA = GL_CONST.ALPHA,
  RGB = GL_CONST.RGB,
  RGBA = GL_CONST.RGBA,
  LUMINANCE = GL_CONST.LUMINANCE,
  LUMINANCE_ALPHA = GL_CONST.LUMINANCE_ALPHA
}

/** TextureMagFilter */
export const enum GL_TEXTURE_MAG_FILTER {
  NEAREST = GL_CONST.NEAREST,
  /** @default */
  LINEAR = GL_CONST.LINEAR
}

/* TextureMinFilter */
export const enum GL_TEXTURE_MIN_FILTER {
  NEAREST = GL_CONST.NEAREST,
  LINEAR = GL_CONST.LINEAR,
  NEAREST_MIPMAP_NEAREST = GL_CONST.NEAREST_MIPMAP_NEAREST,
  LINEAR_MIPMAP_NEAREST = GL_CONST.LINEAR_MIPMAP_NEAREST,
  /** @default */
  NEAREST_MIPMAP_LINEAR = GL_CONST.NEAREST_MIPMAP_LINEAR,
  LINEAR_MIPMAP_LINEAR = GL_CONST.LINEAR_MIPMAP_LINEAR
}

/** TextureWrapMode */
export const enum GL_TEXTURE_WRAP_MODE {
  /** @default */
  REPEAT = GL_CONST.REPEAT,
  CLAMP_TO_EDGE = GL_CONST.CLAMP_TO_EDGE,
  MIRRORED_REPEAT = GL_CONST.MIRRORED_REPEAT
}

/**
 * ```ts
 * gl.texImage2D(.., internalformat, ..)
 * ```
 * [internalFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage#internalformat)
 * [internalformat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D#internalformat)
 */
export const enum GL_INTERNAL_FORMAT {
  RGBA = GL_CONST.RGBA,
  RGB = GL_CONST.RGB,
  LUMINANCE_ALPHA = GL_CONST.LUMINANCE_ALPHA,
  LUMINANCE = GL_CONST.LUMINANCE,
  ALPHA = GL_CONST.ALPHA,
  RGBA4 = GL_CONST.RGBA4,
  RGB565 = GL_CONST.RGB565,
  RGB5_A1 = GL_CONST.RGB5_A1,
  DEPTH_COMPONENT16 = GL_CONST.DEPTH_COMPONENT16,
  STENCIL_INDEX8 = GL_CONST.STENCIL_INDEX8,
  DEPTH_STENCIL = GL_CONST.DEPTH_STENCIL,
  R8 = GL_CONST.R8,
  R8UI = GL_CONST.R8UI,
  R8I = GL_CONST.R8I,
  R16UI = GL_CONST.R16UI,
  R16I = GL_CONST.R16I,
  R32UI = GL_CONST.R32UI,
  R32I = GL_CONST.R32I,
  RG8 = GL_CONST.RG8,
  RG8UI = GL_CONST.RG8UI,
  RG8I = GL_CONST.RG8I,
  RG16UI = GL_CONST.RG16UI,
  RG16I = GL_CONST.RG16I,
  RG32UI = GL_CONST.RG32UI,
  RG32I = GL_CONST.RG32I,
  RGB8 = GL_CONST.RGB8,
  RGBA8 = GL_CONST.RGBA8,
  SRGB8_ALPHA8 = GL_CONST.SRGB8_ALPHA8,
  RGB10_A2 = GL_CONST.RGB10_A2,
  RGBA8UI = GL_CONST.RGBA8UI,
  RGBA8I = GL_CONST.RGBA8I,
  RGB10_A2UI = GL_CONST.RGB10_A2UI,
  RGBA16UI = GL_CONST.RGBA16UI,
  RGBA16I = GL_CONST.RGBA16I,
  RGBA32I = GL_CONST.RGBA32I,
  RGBA32UI = GL_CONST.RGBA32UI,
  DEPTH_COMPONENT24 = GL_CONST.DEPTH_COMPONENT24,
  DEPTH_COMPONENT32F = GL_CONST.DEPTH_COMPONENT32F,
  DEPTH24_STENCIL8 = GL_CONST.DEPTH24_STENCIL8,
  DEPTH32F_STENCIL8 = GL_CONST.DEPTH32F_STENCIL8,
  R16F = GL_CONST.R16F,
  RG16F = GL_CONST.RG16F,
  RGBA16F = GL_CONST.RGBA16F,
  R32F = GL_CONST.R32F,
  RG32F = GL_CONST.RG32F,
  RGBA32F = GL_CONST.RGBA32F,
  R11F_G11F_B10F = GL_CONST.R11F_G11F_B10F
}

/* TextureParameterName */
export const enum GL_TEXTURE_PARAMETER_NAME {
  /**
   * Texture magnification filter
   *
   * @param
   * * `gl.LINEAR` (default value)
   * * `gl.NEAREST`
   */
  TEXTURE_MAG_FILTER = GL_CONST.TEXTURE_MAG_FILTER,

  /**
   * Texture minification filter
   *
   * @param
   * * `gl.LINEAR`
   * * `gl.NEAREST`
   * * `gl.NEAREST_MIPMAP_NEAREST`
   * * `gl.LINEAR_MIPMAP_NEAREST`
   * * `gl.NEAREST_MIPMAP_LINEAR` (default value)
   * * `gl.LINEAR_MIPMAP_LINEAR`
   */
  TEXTURE_MIN_FILTER = GL_CONST.TEXTURE_MIN_FILTER,

  /**
   * Wrapping function for texture coordinate `s`
   *
   * @param
   * * `gl.REPEAT` (default value)
   * * `gl.CLAMP_TO_EDGE`
   * * `gl.MIRRORED_REPEAT`
   */
  TEXTURE_WRAP_S = GL_CONST.TEXTURE_WRAP_S,

  /**
   * Wrapping function for texture coordinate `t`
   *
   * @param
   * * `gl.REPEAT` (default value)
   * * `gl.CLAMP_TO_EDGE`
   * * `gl.MIRRORED_REPEAT`
   */
  TEXTURE_WRAP_T = GL_CONST.TEXTURE_WRAP_T
}

/**
 * TextureTarget
 * ```ts
 * gl.bindTexture(GL_TEXTURE_TARGET.TEXTURE_2D, texture);
 * gl.generateMipmap(GL_TEXTURE_TARGET.TEXTURE_2D);
 * ```
 */
export const enum GL_TEXTURE_TARGET {
  /** A two-dimensional texture. */
  TEXTURE_2D = GL_CONST.TEXTURE_2D,
  /**A cube-mapped texture */
  TEXTURE_CUBE_MAP = GL_CONST.TEXTURE_CUBE_MAP,

  /**
   * A three-dimensional texture
   * @remarks WebGL2 additional constants
   */
  TEXTURE_3D = GL_CONST.TEXTURE_3D,

  /**
   * A two-dimensional array texture
   * @remarks WebGL2 additional constants
   */
  TEXTURE_2D_ARRAY = GL_CONST.TEXTURE_2D_ARRAY
}

/**
 * ```ts
 * gl.compressedTexImage2D()
 * gl.copyTexImage2D()
 * gl.framebufferTexture2D(.., textarget, ..)
 * ```
 */
export const enum GL_TEXTURE_2D_TARGET {
  /** A two-dimensional texture */
  TEXTURE_2D = GL_CONST.TEXTURE_2D,
  /** Positive X face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_POSITIVE_X = GL_CONST.TEXTURE_CUBE_MAP_POSITIVE_X,
  /** Negative X face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_NEGATIVE_X = GL_CONST.TEXTURE_CUBE_MAP_NEGATIVE_X,
  /** Positive Y face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_POSITIVE_Y = GL_CONST.TEXTURE_CUBE_MAP_POSITIVE_Y,
  /** Negative Y face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_CONST.TEXTURE_CUBE_MAP_NEGATIVE_Y,
  /** Positive Z face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_POSITIVE_Z = GL_CONST.TEXTURE_CUBE_MAP_POSITIVE_Z,
  /** Negative Z face for a cube-mapped texture. */
  TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_CONST.TEXTURE_CUBE_MAP_NEGATIVE_Z
}

/**
 * attachment
 * ```ts
 * framebufferTexture2D(.., attachment, ..)
 * ```
 *
 * @remarks there is more with
 * * `WEBGL_draw_buffers` extension
 * * `WEBGL_depth_texture` extension
 *
 */
export const enum GL_FRAMEBUFFER_ATTACHMENT {
  /** Attaches the texture to the framebuffer's color buffer. */
  COLOR_ATTACHMENT0 = GL_CONST.COLOR_ATTACHMENT0,
  /** Attaches the texture to the framebuffer's depth buffer. */
  DEPTH_ATTACHMENT = GL_CONST.DEPTH_ATTACHMENT,
  /** Attaches the texture to the framebuffer's stencil buffer. */
  STENCIL_ATTACHMENT = GL_CONST.STENCIL_ATTACHMENT,
  /**
   * depth and stencil buffer.
   * @remarks WebGL2 additional constants
   */
  DEPTH_STENCIL_ATTACHMENT = GL_CONST.DEPTH_STENCIL_ATTACHMENT,
  COLOR_ATTACHMENT1 = GL_CONST.COLOR_ATTACHMENT1,
  COLOR_ATTACHMENT2 = GL_CONST.COLOR_ATTACHMENT2,
  COLOR_ATTACHMENT3 = GL_CONST.COLOR_ATTACHMENT3,
  COLOR_ATTACHMENT4 = GL_CONST.COLOR_ATTACHMENT4,
  COLOR_ATTACHMENT5 = GL_CONST.COLOR_ATTACHMENT5,
  COLOR_ATTACHMENT6 = GL_CONST.COLOR_ATTACHMENT6,
  COLOR_ATTACHMENT7 = GL_CONST.COLOR_ATTACHMENT7,
  COLOR_ATTACHMENT8 = GL_CONST.COLOR_ATTACHMENT8,
  COLOR_ATTACHMENT9 = GL_CONST.COLOR_ATTACHMENT9,
  COLOR_ATTACHMENT10 = GL_CONST.COLOR_ATTACHMENT10,
  COLOR_ATTACHMENT11 = GL_CONST.COLOR_ATTACHMENT11,
  COLOR_ATTACHMENT12 = GL_CONST.COLOR_ATTACHMENT12,
  COLOR_ATTACHMENT13 = GL_CONST.COLOR_ATTACHMENT13,
  COLOR_ATTACHMENT14 = GL_CONST.COLOR_ATTACHMENT14,
  COLOR_ATTACHMENT15 = GL_CONST.COLOR_ATTACHMENT15
}

/**
 * ```ts
 * gl.compressedTexImage3D
 * ```
 */
export const enum GL_COMPRESSED_TEXTURE_3D_TARGET {
  TEXTURE_2D_ARRAY = GL_CONST.TEXTURE_2D_ARRAY,
  TEXTURE_3D = GL_CONST.TEXTURE_3D
}

/**
 * TextureUnit
 * ```ts
 * gl.activeTexture(gl.TEXTURE1);
 * ```
 */
export const enum GL_TEXTURE_UNIT {
  TEXTURE0 = GL_CONST.TEXTURE0,
  TEXTURE1 = GL_CONST.TEXTURE1,
  TEXTURE2 = GL_CONST.TEXTURE2,
  TEXTURE3 = GL_CONST.TEXTURE3,
  TEXTURE4 = GL_CONST.TEXTURE4,
  TEXTURE5 = GL_CONST.TEXTURE5,
  TEXTURE6 = GL_CONST.TEXTURE6,
  TEXTURE7 = GL_CONST.TEXTURE7,
  TEXTURE8 = GL_CONST.TEXTURE8,
  TEXTURE9 = GL_CONST.TEXTURE9,
  TEXTURE10 = GL_CONST.TEXTURE10,
  TEXTURE11 = GL_CONST.TEXTURE11,
  TEXTURE12 = GL_CONST.TEXTURE12,
  TEXTURE13 = GL_CONST.TEXTURE13,
  TEXTURE14 = GL_CONST.TEXTURE14,
  TEXTURE15 = GL_CONST.TEXTURE15,
  TEXTURE16 = GL_CONST.TEXTURE16,
  TEXTURE17 = GL_CONST.TEXTURE17,
  TEXTURE18 = GL_CONST.TEXTURE18,
  TEXTURE19 = GL_CONST.TEXTURE19,
  TEXTURE20 = GL_CONST.TEXTURE20,
  TEXTURE21 = GL_CONST.TEXTURE21,
  TEXTURE22 = GL_CONST.TEXTURE22,
  TEXTURE23 = GL_CONST.TEXTURE23,
  TEXTURE24 = GL_CONST.TEXTURE24,
  TEXTURE25 = GL_CONST.TEXTURE25,
  TEXTURE26 = GL_CONST.TEXTURE26,
  TEXTURE27 = GL_CONST.TEXTURE27,
  TEXTURE28 = GL_CONST.TEXTURE28,
  TEXTURE29 = GL_CONST.TEXTURE29,
  TEXTURE30 = GL_CONST.TEXTURE30,
  TEXTURE31 = GL_CONST.TEXTURE31
}

/**
 * Comparison function
 * ```ts
 * getTexParameter(.., TEXTURE_COMPARE_FUNC): GL_COMPARISON_FUNCTION;
 * ```
 */
export const enum GL_COMPARISON_FUNCTION {
  /** @default */
  LEQUAL = GL_CONST.LEQUAL,
  GEQUAL = GL_CONST.GEQUAL,
  LESS = GL_CONST.LESS,
  GREATER = GL_CONST.GREATER,
  EQUAL = GL_CONST.EQUAL,
  NOTEQUAL = GL_CONST.NOTEQUAL,
  ALWAYS = GL_CONST.ALWAYS,
  NEVER = GL_CONST.NEVER
}

/**
 * Texture comparison mode
 * ```ts
 * getTexParameter(.., TEXTURE_COMPARE_MODE): GL_COMPARISON_MODE;
 * ```
 */
export const enum GL_COMPARISON_MODE {
  /** @default */
  NONE = GL_CONST.NONE,
  COMPARE_REF_TO_TEXTURE = GL_CONST.COMPARE_REF_TO_TEXTURE
}

export const enum GL_TEXTURES {
  // --- Additional constants defined WebGL 2
  RED = GL_CONST.RED,
  RGB8 = GL_CONST.RGB8,
  RGBA8 = GL_CONST.RGBA8,
  RGB10_A2 = GL_CONST.RGB10_A2,
  TEXTURE_2D = GL_CONST.TEXTURE_2D,
  TEXTURE_3D = GL_CONST.TEXTURE_3D,

  /** Wrapping function for texture coordinate `r` */
  TEXTURE_WRAP_R = GL_CONST.TEXTURE_WRAP_R,

  /** Texture minimum level-of-detail value */
  TEXTURE_MIN_LOD = GL_CONST.TEXTURE_MIN_LOD,

  /** Texture maximum level-of-detail value */
  TEXTURE_MAX_LOD = GL_CONST.TEXTURE_MAX_LOD,

  /** Texture mipmap level */
  TEXTURE_BASE_LEVEL = GL_CONST.TEXTURE_BASE_LEVEL,

  /** Maximum texture mipmap array level */
  TEXTURE_MAX_LEVEL = GL_CONST.TEXTURE_MAX_LEVEL,

  /** Texture comparison mode */
  TEXTURE_COMPARE_MODE = GL_CONST.TEXTURE_COMPARE_MODE,

  /** Texture Comparison function */
  TEXTURE_COMPARE_FUNC = GL_CONST.TEXTURE_COMPARE_FUNC,
  SRGB = GL_CONST.SRGB,
  SRGB8 = GL_CONST.SRGB8,
  SRGB8_ALPHA8 = GL_CONST.SRGB8_ALPHA8,
  COMPARE_REF_TO_TEXTURE = GL_CONST.COMPARE_REF_TO_TEXTURE,
  RGBA32F = GL_CONST.RGBA32F,
  RGB32F = GL_CONST.RGB32F,
  RGBA16F = GL_CONST.RGBA16F,
  RGB16F = GL_CONST.RGB16F,
  TEXTURE_2D_ARRAY = GL_CONST.TEXTURE_2D_ARRAY,
  TEXTURE_BINDING_2D_ARRAY = GL_CONST.TEXTURE_BINDING_2D_ARRAY,
  R11F_G11F_B10F = GL_CONST.R11F_G11F_B10F,
  RGB9_E5 = GL_CONST.RGB9_E5,
  RGBA32UI = GL_CONST.RGBA32UI,
  RGB32UI = GL_CONST.RGB32UI,
  RGBA16UI = GL_CONST.RGBA16UI,
  RGB16UI = GL_CONST.RGB16UI,
  RGBA8UI = GL_CONST.RGBA8UI,
  RGB8UI = GL_CONST.RGB8UI,
  RGBA32I = GL_CONST.RGBA32I,
  RGB32I = GL_CONST.RGB32I,
  RGBA16I = GL_CONST.RGBA16I,
  RGB16I = GL_CONST.RGB16I,
  RGBA8I = GL_CONST.RGBA8I,
  RGB8I = GL_CONST.RGB8I,
  RED_INTEGER = GL_CONST.RED_INTEGER,
  RGB_INTEGER = GL_CONST.RGB_INTEGER,
  RGBA_INTEGER = GL_CONST.RGBA_INTEGER,
  R8 = GL_CONST.R8,
  RG8 = GL_CONST.RG8,
  R16F = GL_CONST.R16F,
  R32F = GL_CONST.R32F,
  RG16F = GL_CONST.RG16F,
  RG32F = GL_CONST.RG32F,
  R8I = GL_CONST.R8I,
  R8UI = GL_CONST.R8UI,
  R16I = GL_CONST.R16I,
  R16UI = GL_CONST.R16UI,
  R32I = GL_CONST.R32I,
  R32UI = GL_CONST.R32UI,
  RG8I = GL_CONST.RG8I,
  RG8UI = GL_CONST.RG8UI,
  RG16I = GL_CONST.RG16I,
  RG16UI = GL_CONST.RG16UI,
  RG32I = GL_CONST.RG32I,
  RG32UI = GL_CONST.RG32UI,
  R8_SNORM = GL_CONST.R8_SNORM,
  RG8_SNORM = GL_CONST.RG8_SNORM,
  RGB8_SNORM = GL_CONST.RGB8_SNORM,
  RGBA8_SNORM = GL_CONST.RGBA8_SNORM,
  RGB10_A2UI = GL_CONST.RGB10_A2UI,
  TEXTURE_IMMUTABLE_FORMAT = GL_CONST.TEXTURE_IMMUTABLE_FORMAT,
  TEXTURE_IMMUTABLE_LEVELS = GL_CONST.TEXTURE_IMMUTABLE_LEVELS
}
